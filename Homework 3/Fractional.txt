In this lab session, finally you will do some development in Java and JUnit. 
See: https://junit.org/junit5/  and  https://www.eclipse.org/community/eclipse_newsletter/2017/october/article5.php

Use below Java code:
Fractional.java
and complete the missing parts (constructor, methods etc.).

Here,  for a and b, a/b forms a fractional number. Then your Fractional class will keep a fractional number and include corresponding functionalities. For example,  simplify method will simplify a/b such that c/d is obtained where c and d have not any common divisor. 

Examples: 3/9 --> 1/3 where a=3, b=9, c=1, d=3,        28/49 --> 4/7 where a=28, b=49, c=4, d=7

You are the software developer responsible for development of Fractional class. But your team leader wants to see that Fractional class passes unit tests with 100% coverage so that it is certainly running as expected. So be creative and establish unit tests for all cases, as much as possible. 

In this lab, you will do 2 things:
1) Develop Fractional class: I already gave the class but there is missing part, complete it  (Fractional.java)
2) Develop Unit Tests using Junit 5: you will develop unit tests for 100% coverage

Some example expected outputs of Fractional class:
 new Fractional(6, 2).toString( )   -->   6/2
 new Fractional(6, 2).simplify( ).toString( )   -->   3
 new Fractional(14, 4).simplify( ).toString( )   -->   7/2

Your code will be tested by your Unit Test (submitted by you as FractionalUnitTest.java) and my Unit Tests (FractionalUnitTest.java developed by me). I have 7 test cases where each test case tests several sub-cases. I will give two of them to you as an example:

@Test
void isNaNTest() {
   assertEquals(Fractional.NotANumber, new Fractional(0, 0).toString());
}

@Test
void signTest() {
   Assertions.assertThrows(ArithmeticException.class, () -> {new Fractional(0, 0).sign(); });  

   assertEquals(0, new Fractional(0, 10).sign());
   assertEquals(+1, new Fractional(10, 0).sign());
   // there are more
}

Note that, Not a Number has no sign so you need to throw an exception if sign is called for Not a Number.
